version: "3.9"
services:
  postgres:
    image: postgres:15-alpine
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: "prtdb"
      POSTGRES_USER: "pgprtuser"
      POSTGRES_PASSWORD: "mkfrg[o268phwt;enravi0]"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pgprtuser -d prtdb"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  apiserver:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: "gunicorn --bind :8080 --workers 3 app:app"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

  react-app:
    build:
      context: .
      dockerfile: ./Dockerfile.reactapp
    command: "npm start"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
